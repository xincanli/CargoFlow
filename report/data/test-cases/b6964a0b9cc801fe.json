{"uid":"b6964a0b9cc801fe","name":"test_create_shipment[FF查看BookingOption1]","fullName":"testcases.test_BookingDistribution.TestBooking#test_create_shipment","historyId":"47933f76284fb0940329d04200d7328e","time":{"start":1755084268185,"stop":1755084268275,"duration":90},"status":"failed","statusMessage":"AssertionError: \"期望:\"200,\"实际:\"403","statusTrace":"self = <testcases.test_BookingDistribution.TestBooking object at 0x00000245104F8920>\ncaseinfo2 = {'name': 'FF查看BookingOption', 'request': {'headers': {'Accept': 'application/ld+json', 'Authorization': 'Bearer eyJhbG...ld+json'}, 'method': 'get', 'url': '${BookingOption}'}, 'token_key': 'FF_token', 'validate': {'status_code': 200}, ...}\n\n    @pytest.mark.parametrize(\"caseinfo2\", yaml_util.read_testcase_yaml('create_BookingShipment.yaml'))\n    @log_decorator\n    def test_create_shipment(self, caseinfo2):\n        name = caseinfo2[\"name\"]\n        method = caseinfo2[\"request\"]['method']\n        url = yaml_util.replace_variables(caseinfo2['request']['url'])\n        headers = caseinfo2[\"request\"].get(\"headers\", {})\n        data = yaml_util.replace_variables(caseinfo2[\"request\"].get(\"data\", {}))\n        token_key = caseinfo2.get(\"token_key\", \"access_token\")\n        wait = caseinfo2.get(\"wait\", None)\n        expected_status = caseinfo2[\"validate\"][\"status_code\"]\n    \n        LogistObject = request_util.send_request(\n            method, url, data, headers=headers, use_token=True,\n            token_key=token_key, wait=wait\n        )\n    \n        if \"logistics-objects?\" in url or \"access-delegations\" in url:\n            loid = ''.join(re.findall(r'[a-zA-Z]+', name))\n            yaml_util.write_extract_yaml({loid: LogistObject.headers.get(\"Location\")})\n    \n>       assertion.assert_status_code(LogistObject, expected=expected_status)\n\ntestcases\\test_BookingDistribution.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <assertions.Assertions object at 0x00000245104D3290>\nresp = <Response [403]>, expected = 200\n\n    def assert_status_code(self,resp, expected=100):\n>       assert resp.status_code == expected, f'\"期望:\"{expected},\"实际:\"{resp.status_code}'\nE       AssertionError: \"期望:\"200,\"实际:\"403\n\nassertions.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_yaml","time":{"start":1755084266680,"stop":1755084266680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: \"期望:\"200,\"实际:\"403","statusTrace":"self = <testcases.test_BookingDistribution.TestBooking object at 0x00000245104F8920>\ncaseinfo2 = {'name': 'FF查看BookingOption', 'request': {'headers': {'Accept': 'application/ld+json', 'Authorization': 'Bearer eyJhbG...ld+json'}, 'method': 'get', 'url': '${BookingOption}'}, 'token_key': 'FF_token', 'validate': {'status_code': 200}, ...}\n\n    @pytest.mark.parametrize(\"caseinfo2\", yaml_util.read_testcase_yaml('create_BookingShipment.yaml'))\n    @log_decorator\n    def test_create_shipment(self, caseinfo2):\n        name = caseinfo2[\"name\"]\n        method = caseinfo2[\"request\"]['method']\n        url = yaml_util.replace_variables(caseinfo2['request']['url'])\n        headers = caseinfo2[\"request\"].get(\"headers\", {})\n        data = yaml_util.replace_variables(caseinfo2[\"request\"].get(\"data\", {}))\n        token_key = caseinfo2.get(\"token_key\", \"access_token\")\n        wait = caseinfo2.get(\"wait\", None)\n        expected_status = caseinfo2[\"validate\"][\"status_code\"]\n    \n        LogistObject = request_util.send_request(\n            method, url, data, headers=headers, use_token=True,\n            token_key=token_key, wait=wait\n        )\n    \n        if \"logistics-objects?\" in url or \"access-delegations\" in url:\n            loid = ''.join(re.findall(r'[a-zA-Z]+', name))\n            yaml_util.write_extract_yaml({loid: LogistObject.headers.get(\"Location\")})\n    \n>       assertion.assert_status_code(LogistObject, expected=expected_status)\n\ntestcases\\test_BookingDistribution.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <assertions.Assertions object at 0x00000245104D3290>\nresp = <Response [403]>, expected = 200\n\n    def assert_status_code(self,resp, expected=100):\n>       assert resp.status_code == expected, f'\"期望:\"{expected},\"实际:\"{resp.status_code}'\nE       AssertionError: \"期望:\"200,\"实际:\"403\n\nassertions.py:3: AssertionError","steps":[],"attachments":[{"uid":"ddb6799a590f3b4c","name":"log","source":"ddb6799a590f3b4c.txt","type":"text/plain","size":872}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_BookingDistribution"},{"name":"subSuite","value":"TestBooking"},{"name":"host","value":"xcli"},{"name":"thread","value":"23188-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_BookingDistribution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo2","value":"{'name': 'FF查看BookingOption', 'token_key': 'FF_token', 'request': {'method': 'get', 'url': '${BookingOption}', 'headers': {'Accept': 'application/ld+json', 'Content-Type': 'application/ld+json'}}, 'wait': 0, 'validate': {'status_code': 200}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"b6964a0b9cc801fe.json","parameterValues":["{'name': 'FF查看BookingOption', 'token_key': 'FF_token', 'request': {'method': 'get', 'url': '${BookingOption}', 'headers': {'Accept': 'application/ld+json', 'Content-Type': 'application/ld+json'}}, 'wait': 0, 'validate': {'status_code': 200}}"]}